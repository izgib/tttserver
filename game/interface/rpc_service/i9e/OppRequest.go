// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package i9e

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OppRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsOppRequest(buf []byte, offset flatbuffers.UOffsetT) *OppRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OppRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OppRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OppRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OppRequest) ReqType() OpponentReqMsg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return OpponentReqMsg(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *OppRequest) MutateReqType(n OpponentReqMsg) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *OppRequest) Req(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func OppRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func OppRequestAddReqType(builder *flatbuffers.Builder, reqType OpponentReqMsg) {
	builder.PrependByteSlot(0, byte(reqType), 0)
}
func OppRequestAddReq(builder *flatbuffers.Builder, req flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(req), 0)
}
func OppRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
