//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: schema

package i9e

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for GameConfigurator service
type GameConfiguratorClient interface{
  GetListOfGames(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (GameConfigurator_GetListOfGamesClient, error)  
  CreateGame(ctx context.Context, 
  	opts... grpc.CallOption) (GameConfigurator_CreateGameClient, error)  
  JoinGame(ctx context.Context, 
  	opts... grpc.CallOption) (GameConfigurator_JoinGameClient, error)  
}

type gameConfiguratorClient struct {
  cc *grpc.ClientConn
}

func NewGameConfiguratorClient(cc *grpc.ClientConn) GameConfiguratorClient {
  return &gameConfiguratorClient{cc}
}

func (c *gameConfiguratorClient) GetListOfGames(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (GameConfigurator_GetListOfGamesClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_GameConfigurator_serviceDesc.Streams[0], c.cc, "/i9e.GameConfigurator/GetListOfGames", opts...)
  if err != nil { return nil, err }
  x := &gameConfiguratorGetListOfGamesClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type GameConfigurator_GetListOfGamesClient interface {
  Recv() (*ListItem, error)
  grpc.ClientStream
}

type gameConfiguratorGetListOfGamesClient struct{
  grpc.ClientStream
}

func (x *gameConfiguratorGetListOfGamesClient) Recv() (*ListItem, error) {
  m := new(ListItem)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *gameConfiguratorClient) CreateGame(ctx context.Context, 
	opts... grpc.CallOption) (GameConfigurator_CreateGameClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_GameConfigurator_serviceDesc.Streams[1], c.cc, "/i9e.GameConfigurator/CreateGame", opts...)
  if err != nil { return nil, err }
  x := &gameConfiguratorCreateGameClient{stream}
  return x,nil
}

type GameConfigurator_CreateGameClient interface {
  Send(*flatbuffers.Builder) error
  Recv() (*CrResponse, error)
  grpc.ClientStream
}

type gameConfiguratorCreateGameClient struct{
  grpc.ClientStream
}

func (x *gameConfiguratorCreateGameClient) Send(m *flatbuffers.Builder) error {
  return x.ClientStream.SendMsg(m)
}

func (x *gameConfiguratorCreateGameClient) Recv() (*CrResponse, error) {
  m := new(CrResponse)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *gameConfiguratorClient) JoinGame(ctx context.Context, 
	opts... grpc.CallOption) (GameConfigurator_JoinGameClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_GameConfigurator_serviceDesc.Streams[2], c.cc, "/i9e.GameConfigurator/JoinGame", opts...)
  if err != nil { return nil, err }
  x := &gameConfiguratorJoinGameClient{stream}
  return x,nil
}

type GameConfigurator_JoinGameClient interface {
  Send(*flatbuffers.Builder) error
  Recv() (*OppResponse, error)
  grpc.ClientStream
}

type gameConfiguratorJoinGameClient struct{
  grpc.ClientStream
}

func (x *gameConfiguratorJoinGameClient) Send(m *flatbuffers.Builder) error {
  return x.ClientStream.SendMsg(m)
}

func (x *gameConfiguratorJoinGameClient) Recv() (*OppResponse, error) {
  m := new(OppResponse)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for GameConfigurator service
type GameConfiguratorServer interface {
  GetListOfGames(*GameFilter, GameConfigurator_GetListOfGamesServer) error  
  CreateGame(GameConfigurator_CreateGameServer) error  
  JoinGame(GameConfigurator_JoinGameServer) error  
}

func RegisterGameConfiguratorServer(s *grpc.Server, srv GameConfiguratorServer) {
  s.RegisterService(&_GameConfigurator_serviceDesc, srv)
}

func _GameConfigurator_GetListOfGames_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(GameFilter)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(GameConfiguratorServer).GetListOfGames(m, &gameConfiguratorGetListOfGamesServer{stream})
}

type GameConfigurator_GetListOfGamesServer interface { 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type gameConfiguratorGetListOfGamesServer struct {
  grpc.ServerStream
}

func (x *gameConfiguratorGetListOfGamesServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


func _GameConfigurator_CreateGame_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(GameConfiguratorServer).CreateGame(&gameConfiguratorCreateGameServer{stream})
}

type GameConfigurator_CreateGameServer interface { 
  Send(* flatbuffers.Builder) error
  Recv() (* CrRequest, error)
  grpc.ServerStream
}

type gameConfiguratorCreateGameServer struct {
  grpc.ServerStream
}

func (x *gameConfiguratorCreateGameServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}

func (x *gameConfiguratorCreateGameServer) Recv() (*CrRequest, error) {
  m := new(CrRequest)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


func _GameConfigurator_JoinGame_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(GameConfiguratorServer).JoinGame(&gameConfiguratorJoinGameServer{stream})
}

type GameConfigurator_JoinGameServer interface { 
  Send(* flatbuffers.Builder) error
  Recv() (* OppRequest, error)
  grpc.ServerStream
}

type gameConfiguratorJoinGameServer struct {
  grpc.ServerStream
}

func (x *gameConfiguratorJoinGameServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}

func (x *gameConfiguratorJoinGameServer) Recv() (*OppRequest, error) {
  m := new(OppRequest)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


var _GameConfigurator_serviceDesc = grpc.ServiceDesc{
  ServiceName: "i9e.GameConfigurator",
  HandlerType: (*GameConfiguratorServer)(nil),
  Methods: []grpc.MethodDesc{
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "GetListOfGames",
      Handler: _GameConfigurator_GetListOfGames_Handler, 
      ServerStreams: true,
    },
    {
      StreamName: "CreateGame",
      Handler: _GameConfigurator_CreateGame_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
    {
      StreamName: "JoinGame",
      Handler: _GameConfigurator_JoinGame_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
  },
}

