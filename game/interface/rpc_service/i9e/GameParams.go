// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package i9e

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameParams struct {
	_tab flatbuffers.Table
}

func GetRootAsGameParams(buf []byte, offset flatbuffers.UOffsetT) *GameParams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameParams{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameParams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameParams) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameParams) Rows() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameParams) MutateRows(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *GameParams) Cols() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameParams) MutateCols(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func (rcv *GameParams) Win() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameParams) MutateWin(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *GameParams) Mark() MarkType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return MarkType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GameParams) MutateMark(n MarkType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func GameParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GameParamsAddRows(builder *flatbuffers.Builder, rows int16) {
	builder.PrependInt16Slot(0, rows, 0)
}
func GameParamsAddCols(builder *flatbuffers.Builder, cols int16) {
	builder.PrependInt16Slot(1, cols, 0)
}
func GameParamsAddWin(builder *flatbuffers.Builder, win int16) {
	builder.PrependInt16Slot(2, win, 0)
}
func GameParamsAddMark(builder *flatbuffers.Builder, mark MarkType) {
	builder.PrependInt8Slot(3, int8(mark), 0)
}
func GameParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
