// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package i9e

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsGameEvent(buf []byte, offset flatbuffers.UOffsetT) *GameEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameEvent{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameEvent) Type() GameEventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return GameEventType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GameEvent) MutateType(n GameEventType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *GameEvent) FollowUp(obj *WinLine) *WinLine {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(WinLine)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GameEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GameEventAddType(builder *flatbuffers.Builder, type_ GameEventType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func GameEventAddFollowUp(builder *flatbuffers.Builder, followUp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(followUp), 0)
}
func GameEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
