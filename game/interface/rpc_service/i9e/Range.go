// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package i9e

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Range struct {
	_tab flatbuffers.Table
}

func GetRootAsRange(buf []byte, offset flatbuffers.UOffsetT) *Range {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Range{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Range) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Range) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Range) Start() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 3
}

func (rcv *Range) MutateStart(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *Range) End() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 15
}

func (rcv *Range) MutateEnd(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func RangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RangeAddStart(builder *flatbuffers.Builder, start int16) {
	builder.PrependInt16Slot(0, start, 3)
}
func RangeAddEnd(builder *flatbuffers.Builder, end int16) {
	builder.PrependInt16Slot(1, end, 15)
}
func RangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
