// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameFilter struct {
	_tab flatbuffers.Table
}

func GetRootAsGameFilter(buf []byte, offset flatbuffers.UOffsetT) *GameFilter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameFilter{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameFilter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameFilter) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameFilter) Rows(obj *Range) *Range {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Range)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameFilter) Cols(obj *Range) *Range {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Range)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameFilter) Win(obj *Range) *Range {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Range)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameFilter) Mark() MarkTypeFilter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return MarkTypeFilter(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GameFilter) MutateMark(n MarkTypeFilter) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func GameFilterStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GameFilterAddRows(builder *flatbuffers.Builder, rows flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rows), 0)
}
func GameFilterAddCols(builder *flatbuffers.Builder, cols flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cols), 0)
}
func GameFilterAddWin(builder *flatbuffers.Builder, win flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(win), 0)
}
func GameFilterAddMark(builder *flatbuffers.Builder, mark MarkTypeFilter) {
	builder.PrependInt8Slot(3, int8(mark), 0)
}
func GameFilterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
