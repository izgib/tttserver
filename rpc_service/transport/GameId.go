// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameId struct {
	_tab flatbuffers.Table
}

func GetRootAsGameId(buf []byte, offset flatbuffers.UOffsetT) *GameId {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameId{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameId) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameId) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameId) ID() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameId) MutateID(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func GameIdStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GameIdAddID(builder *flatbuffers.Builder, ID int16) {
	builder.PrependInt16Slot(0, ID, 0)
}
func GameIdEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
